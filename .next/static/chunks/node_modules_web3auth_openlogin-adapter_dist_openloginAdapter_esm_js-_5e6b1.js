"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_web3auth_openlogin-adapter_dist_openloginAdapter_esm_js-_5e6b1"],{

/***/ "./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"OpenloginAdapter\": function() { return /* binding */ OpenloginAdapter; },\n/* harmony export */   \"getOpenloginDefaultOptions\": function() { return /* binding */ getOpenloginDefaultOptions; }\n/* harmony export */ });\n/* harmony import */ var _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @toruslabs/openlogin */ \"./node_modules/@toruslabs/openlogin/dist/openlogin.esm.js\");\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @web3auth/base */ \"./node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/dist/base.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @web3auth/base-provider */ \"./node_modules/@web3auth/base-provider/dist/baseProvider.esm.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash.merge */ \"./node_modules/lodash.merge/index.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\nconst getOpenloginDefaultOptions = (chainNamespace, chainId) => {\n  return {\n    adapterSettings: {\n      network: _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.getChainConfig)(chainNamespace, chainId) : null,\n    loginSettings: {\n      relogin: true\n    }\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass OpenloginAdapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.BaseAdapter {\n  constructor(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;\n\n    super();\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"name\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.OPENLOGIN);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"adapterNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_NAMESPACES.MULTICHAIN);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"type\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_CATEGORY.IN_APP);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"openloginInstance\", null);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"status\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"currentChainNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.EIP155);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"openloginOptions\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"loginSettings\", {});\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this, \"privKeyProvider\", null);\n\n    _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"const openlogin chainConfig\", this.chainConfig);\n\n      if (!this.chainConfig.rpcTarget) {\n        throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n\n  get provider() {\n    var _this$privKeyProvider;\n\n    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    var _this$openloginOption;\n\n    super.checkInitializationRequirements();\n    if (!((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId)) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig && this.currentChainNamespace !== _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.OTHER) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.UX_MODE.REDIRECT) {\n      const redirectResult = (0,_toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__.getHashQueryParams)();\n\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n\n    this.openloginOptions = _objectSpread(_objectSpread({}, this.openloginOptions), {}, {\n      replaceUrlOnRedirect: isRedirectResult\n    });\n    this.openloginInstance = new _toruslabs_openlogin__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.openloginOptions);\n    _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"initializing openlogin adapter init\");\n    await this.openloginInstance.init();\n    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;\n    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.debug(\"initializing openlogin adapter\"); // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params) {\n    super.checkConnectionRequirements();\n    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTING;\n    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n      adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.OPENLOGIN\n    }));\n\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error) {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.log.error(\"Failed to connect with openlogin provider\", error); // ready again to be connected\n\n      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;\n      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.ERRORED, error);\n\n      if (error !== null && error !== void 0 && error.message.includes(\"user closed popup\")) {\n        throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.popupClosed();\n      }\n\n      throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n\n    if (options.cleanup) {\n      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY;\n    }\n\n    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  } // should be called only before initialization.\n\n\n  setAdapterSettings(adapterSettings) {\n    if (this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n  } // should be called only before initialization.\n\n\n  setChainConfig(customChainConfig) {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  async connectWithProvider(params) {\n    if (!this.chainConfig) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.SOLANA) {\n      const {\n        SolanaPrivateKeyProvider\n      } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/solana-provider */ \"./node_modules/@web3auth/solana-provider/dist/solanaProvider.esm.js\"));\n      this.privKeyProvider = new SolanaPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else if (this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.EIP155) {\n      const {\n        EthereumPrivateKeyProvider\n      } = await __webpack_require__.e(/*! import() */ \"node_modules_web3auth_ethereum-provider_dist_ethereumProvider_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! @web3auth/ethereum-provider */ \"./node_modules/@web3auth/ethereum-provider/dist/ethereumProvider.esm.js\"));\n      this.privKeyProvider = new EthereumPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else if (this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new _web3auth_base_provider__WEBPACK_IMPORTED_MODULE_3__.CommonPrivateKeyProvider();\n    } else {\n      throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n    } // if not logged in then login\n\n\n    if (!this.openloginInstance.privKey && params) {\n      var _params$extraLoginOpt;\n\n      await this.openloginInstance.login(lodash_merge__WEBPACK_IMPORTED_MODULE_4___default()(this.loginSettings, {\n        loginProvider: params.loginProvider\n      }, {\n        extraLoginOptions: _objectSpread(_objectSpread({}, params.extraLoginOptions || {}), {}, {\n          login_hint: params.login_hint || ((_params$extraLoginOpt = params.extraLoginOptions) === null || _params$extraLoginOpt === void 0 ? void 0 : _params$extraLoginOpt.login_hint)\n        })\n      }));\n    }\n\n    let finalPrivKey = this.openloginInstance.privKey;\n\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.CHAIN_NAMESPACES.SOLANA) {\n        const {\n          getED25519Key\n        } = await __webpack_require__.e(/*! import() */ \"node_modules_toruslabs_openlogin-ed25519_dist_openloginEd25519_esm_js\").then(__webpack_require__.bind(__webpack_require__, /*! @toruslabs/openlogin-ed25519 */ \"./node_modules/@toruslabs/openlogin-ed25519/dist/openloginEd25519.esm.js\"));\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_STATUS.CONNECTED;\n      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.ADAPTER_EVENTS.CONNECTED, {\n        adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.WALLET_ADAPTERS.OPENLOGIN,\n        reconnected: !params\n      });\n    }\n  }\n\n}\n\n\n//# sourceMappingURL=openloginAdapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL29wZW5sb2dpbi1hZGFwdGVyL2Rpc3Qvb3BlbmxvZ2luQWRhcHRlci5lc20uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBaUc7QUFDdUg7QUFDcEo7QUFDRDtBQUNsQzs7QUFFakM7QUFDQTtBQUNBO0FBQ0EsZUFBZSwyRUFBeUI7QUFDeEM7QUFDQSxjQUFjLCtEQUFhO0FBQzNCLEtBQUs7QUFDTCxrQ0FBa0MsOERBQWM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkMsZ0NBQWdDLG9DQUFvQyxvREFBb0QsNkRBQTZELGlFQUFpRSxzQ0FBc0M7O0FBRXZVLGlDQUFpQyxnQkFBZ0Isc0JBQXNCLE9BQU8sdURBQXVELDZEQUE2RCxpRkFBZSw2QkFBNkIsb0tBQW9LLG1GQUFtRixLQUFLO0FBQzFlLCtCQUErQix1REFBVztBQUMxQztBQUNBOztBQUVBOztBQUVBLElBQUksaUZBQWUsZUFBZSxxRUFBeUI7O0FBRTNELElBQUksaUZBQWUsMkJBQTJCLHlFQUE2Qjs7QUFFM0UsSUFBSSxpRkFBZSxlQUFlLG1FQUF1Qjs7QUFFekQsSUFBSSxpRkFBZTs7QUFFbkIsSUFBSSxpRkFBZSxpQkFBaUIsb0VBQXdCOztBQUU1RCxJQUFJLGlGQUFlLGdDQUFnQyxtRUFBdUI7O0FBRTFFLElBQUksaUZBQWU7O0FBRW5CLElBQUksaUZBQWUsMEJBQTBCOztBQUU3QyxJQUFJLGlGQUFlOztBQUVuQixJQUFJLHFEQUFTO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsZUFBZSwyRUFBeUI7QUFDeEMsS0FBSywrREFBK0Q7QUFDcEUsdURBQXVELHdEQUF3RDs7QUFFL0c7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZELE1BQU0scURBQVM7O0FBRWY7QUFDQSxjQUFjLG1GQUF1QztBQUNyRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4Q0FBOEM7QUFDOUM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsaUpBQWlKLG1GQUF1QztBQUN4TCw0REFBNEQsa0VBQXNCLFFBQVEsbUZBQXVDO0FBQ2pJOztBQUVBLHlDQUF5QyxrRUFBZ0I7QUFDekQsNkJBQTZCLHdFQUFrQjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMERBQTBELDRCQUE0QjtBQUN0RjtBQUNBLEtBQUs7QUFDTCxpQ0FBaUMsNERBQVM7QUFDMUMsSUFBSSxxREFBUztBQUNiO0FBQ0Esa0JBQWtCLGdFQUFvQjtBQUN0QyxjQUFjLGdFQUFvQixFQUFFLHFFQUF5Qjs7QUFFN0Q7QUFDQSxNQUFNLHFEQUFTLG9DQUFvQzs7QUFFbkQ7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLE1BQU0scURBQVM7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixxRUFBeUI7QUFDM0MsY0FBYyxxRUFBeUIsZ0NBQWdDLGFBQWE7QUFDcEYsZUFBZSxxRUFBeUI7QUFDeEMsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sTUFBTSxxREFBUyxzREFBc0Q7O0FBRXJFLG9CQUFvQixnRUFBb0I7QUFDeEMsZ0JBQWdCLGtFQUFzQjs7QUFFdEM7QUFDQSxjQUFjLHdFQUE0QjtBQUMxQzs7QUFFQSxZQUFZLDRFQUFnQztBQUM1QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG9FQUF3QixRQUFRLDhFQUFrQztBQUMxRix1Q0FBdUMsOEVBQWtDO0FBQ3pFOztBQUVBO0FBQ0Esb0JBQW9CLG9FQUF3QjtBQUM1QztBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0Esb0JBQW9CLGdFQUFvQjtBQUN4Qzs7QUFFQSxjQUFjLHVFQUEyQjtBQUN6Qzs7QUFFQTtBQUNBLHdCQUF3QixvRUFBd0IsUUFBUSw4RUFBa0M7QUFDMUYsdUNBQXVDLDhFQUFrQztBQUN6RTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQSx3QkFBd0IsZ0VBQW9CO0FBQzVDO0FBQ0Esd0VBQXdFLDhEQUE4RDtBQUN0SSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxtRkFBdUM7QUFDeEUsdUNBQXVDLDhFQUFrQzs7QUFFekUsdUNBQXVDLG1FQUF1QjtBQUM5RDtBQUNBO0FBQ0EsUUFBUSxRQUFRLDRMQUFtQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNLHdDQUF3QyxtRUFBdUI7QUFDckU7QUFDQTtBQUNBLFFBQVEsUUFBUSwrUUFBcUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTSx3Q0FBd0Msa0VBQXNCO0FBQ3BFLGlDQUFpQyw2RUFBd0I7QUFDekQsTUFBTTtBQUNOO0FBQ0EsTUFBTTs7O0FBR047QUFDQTs7QUFFQSx5Q0FBeUMsbURBQUs7QUFDOUM7QUFDQSxPQUFPO0FBQ1AseURBQXlELGdDQUFnQyxLQUFLO0FBQzlGO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDs7QUFFQTs7QUFFQTtBQUNBLHlDQUF5QyxtRUFBdUI7QUFDaEU7QUFDQTtBQUNBLFVBQVUsUUFBUSxrUkFBc0M7QUFDeEQ7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixvRUFBd0I7QUFDNUMsZ0JBQWdCLG9FQUF3QjtBQUN4QyxpQkFBaUIscUVBQXlCO0FBQzFDO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRXdEO0FBQ3hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9Ad2ViM2F1dGgvb3BlbmxvZ2luLWFkYXB0ZXIvZGlzdC9vcGVubG9naW5BZGFwdGVyLmVzbS5qcz81ZTZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPcGVuTG9naW4sIHsgT1BFTkxPR0lOX05FVFdPUkssIFVYX01PREUsIGdldEhhc2hRdWVyeVBhcmFtcyB9IGZyb20gJ0B0b3J1c2xhYnMvb3BlbmxvZ2luJztcbmltcG9ydCB7IGdldENoYWluQ29uZmlnLCBCYXNlQWRhcHRlciwgV0FMTEVUX0FEQVBURVJTLCBBREFQVEVSX05BTUVTUEFDRVMsIEFEQVBURVJfQ0FURUdPUlksIEFEQVBURVJfU1RBVFVTLCBDSEFJTl9OQU1FU1BBQ0VTLCBsb2csIFdhbGxldEluaXRpYWxpemF0aW9uRXJyb3IsIEFEQVBURVJfRVZFTlRTLCBXYWxsZXRMb2dpbkVycm9yIH0gZnJvbSAnQHdlYjNhdXRoL2Jhc2UnO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCB7IENvbW1vblByaXZhdGVLZXlQcm92aWRlciB9IGZyb20gJ0B3ZWIzYXV0aC9iYXNlLXByb3ZpZGVyJztcbmltcG9ydCBtZXJnZSBmcm9tICdsb2Rhc2gubWVyZ2UnO1xuXG5jb25zdCBnZXRPcGVubG9naW5EZWZhdWx0T3B0aW9ucyA9IChjaGFpbk5hbWVzcGFjZSwgY2hhaW5JZCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGFkYXB0ZXJTZXR0aW5nczoge1xuICAgICAgbmV0d29yazogT1BFTkxPR0lOX05FVFdPUksuTUFJTk5FVCxcbiAgICAgIGNsaWVudElkOiBcIlwiLFxuICAgICAgdXhNb2RlOiBVWF9NT0RFLlBPUFVQXG4gICAgfSxcbiAgICBjaGFpbkNvbmZpZzogY2hhaW5OYW1lc3BhY2UgPyBnZXRDaGFpbkNvbmZpZyhjaGFpbk5hbWVzcGFjZSwgY2hhaW5JZCkgOiBudWxsLFxuICAgIGxvZ2luU2V0dGluZ3M6IHtcbiAgICAgIHJlbG9naW46IHRydWVcbiAgICB9XG4gIH07XG59O1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuY2xhc3MgT3BlbmxvZ2luQWRhcHRlciBleHRlbmRzIEJhc2VBZGFwdGVyIHtcbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgdmFyIF9wYXJhbXMkY2hhaW5Db25maWcsIF9wYXJhbXMkY2hhaW5Db25maWcyLCBfcGFyYW1zJGNoYWluQ29uZmlnMztcblxuICAgIHN1cGVyKCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIFdBTExFVF9BREFQVEVSUy5PUEVOTE9HSU4pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiYWRhcHRlck5hbWVzcGFjZVwiLCBBREFQVEVSX05BTUVTUEFDRVMuTVVMVElDSEFJTik7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0eXBlXCIsIEFEQVBURVJfQ0FURUdPUlkuSU5fQVBQKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9wZW5sb2dpbkluc3RhbmNlXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhdHVzXCIsIEFEQVBURVJfU1RBVFVTLk5PVF9SRUFEWSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjdXJyZW50Q2hhaW5OYW1lc3BhY2VcIiwgQ0hBSU5fTkFNRVNQQUNFUy5FSVAxNTUpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwib3BlbmxvZ2luT3B0aW9uc1wiLCB2b2lkIDApO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwibG9naW5TZXR0aW5nc1wiLCB7fSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJwcml2S2V5UHJvdmlkZXJcIiwgbnVsbCk7XG5cbiAgICBsb2cuZGVidWcoXCJjb25zdCBvcGVubG9naW4gYWRhcHRlclwiLCBwYXJhbXMpO1xuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gZ2V0T3BlbmxvZ2luRGVmYXVsdE9wdGlvbnMoKF9wYXJhbXMkY2hhaW5Db25maWcgPSBwYXJhbXMuY2hhaW5Db25maWcpID09PSBudWxsIHx8IF9wYXJhbXMkY2hhaW5Db25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wYXJhbXMkY2hhaW5Db25maWcuY2hhaW5OYW1lc3BhY2UsIChfcGFyYW1zJGNoYWluQ29uZmlnMiA9IHBhcmFtcy5jaGFpbkNvbmZpZykgPT09IG51bGwgfHwgX3BhcmFtcyRjaGFpbkNvbmZpZzIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wYXJhbXMkY2hhaW5Db25maWcyLmNoYWluSWQpO1xuICAgIHRoaXMub3BlbmxvZ2luT3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7XG4gICAgICBjbGllbnRJZDogXCJcIixcbiAgICAgIG5ldHdvcms6IE9QRU5MT0dJTl9ORVRXT1JLLk1BSU5ORVRcbiAgICB9LCBkZWZhdWx0T3B0aW9ucy5hZGFwdGVyU2V0dGluZ3MpLCBwYXJhbXMuYWRhcHRlclNldHRpbmdzIHx8IHt9KTtcbiAgICB0aGlzLmxvZ2luU2V0dGluZ3MgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRPcHRpb25zLmxvZ2luU2V0dGluZ3MpLCBwYXJhbXMubG9naW5TZXR0aW5ncyk7IC8vIGlmIG5vIGNoYWluTmFtZXNwYWNlIGlzIHBhc3NlZCB0aGVuIGNoYWluIGNvbmZpZyBzaG91bGQgYmUgc2V0IGJlZm9yZSBjYWxsaW5nIGluaXRcblxuICAgIGlmICgoX3BhcmFtcyRjaGFpbkNvbmZpZzMgPSBwYXJhbXMuY2hhaW5Db25maWcpICE9PSBudWxsICYmIF9wYXJhbXMkY2hhaW5Db25maWczICE9PSB2b2lkIDAgJiYgX3BhcmFtcyRjaGFpbkNvbmZpZzMuY2hhaW5OYW1lc3BhY2UpIHtcbiAgICAgIHZhciBfcGFyYW1zJGNoYWluQ29uZmlnNDtcblxuICAgICAgdGhpcy5jdXJyZW50Q2hhaW5OYW1lc3BhY2UgPSAoX3BhcmFtcyRjaGFpbkNvbmZpZzQgPSBwYXJhbXMuY2hhaW5Db25maWcpID09PSBudWxsIHx8IF9wYXJhbXMkY2hhaW5Db25maWc0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcGFyYW1zJGNoYWluQ29uZmlnNC5jaGFpbk5hbWVzcGFjZTtcbiAgICAgIGNvbnN0IGRlZmF1bHRDaGFpbklkQ29uZmlnID0gZGVmYXVsdE9wdGlvbnMuY2hhaW5Db25maWcgPyBkZWZhdWx0T3B0aW9ucy5jaGFpbkNvbmZpZyA6IHt9O1xuICAgICAgdGhpcy5jaGFpbkNvbmZpZyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZGVmYXVsdENoYWluSWRDb25maWcpLCBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuY2hhaW5Db25maWcpO1xuICAgICAgbG9nLmRlYnVnKFwiY29uc3Qgb3BlbmxvZ2luIGNoYWluQ29uZmlnXCIsIHRoaXMuY2hhaW5Db25maWcpO1xuXG4gICAgICBpZiAoIXRoaXMuY2hhaW5Db25maWcucnBjVGFyZ2V0KSB7XG4gICAgICAgIHRocm93IFdhbGxldEluaXRpYWxpemF0aW9uRXJyb3IuaW52YWxpZFBhcmFtcyhcInJwY1RhcmdldCBpcyByZXF1aXJlZCBpbiBjaGFpbkNvbmZpZ1wiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgY2hhaW5Db25maWdQcm94eSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFpbkNvbmZpZyA/IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY2hhaW5Db25maWcpIDogbnVsbDtcbiAgfVxuXG4gIGdldCBwcm92aWRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJpdktleVByb3ZpZGVyO1xuXG4gICAgcmV0dXJuICgoX3RoaXMkcHJpdktleVByb3ZpZGVyID0gdGhpcy5wcml2S2V5UHJvdmlkZXIpID09PSBudWxsIHx8IF90aGlzJHByaXZLZXlQcm92aWRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkcHJpdktleVByb3ZpZGVyLnByb3ZpZGVyKSB8fCBudWxsO1xuICB9XG5cbiAgc2V0IHByb3ZpZGVyKF8pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWRcIik7XG4gIH1cblxuICBhc3luYyBpbml0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3BlbmxvZ2luT3B0aW9uO1xuXG4gICAgc3VwZXIuY2hlY2tJbml0aWFsaXphdGlvblJlcXVpcmVtZW50cygpO1xuICAgIGlmICghKChfdGhpcyRvcGVubG9naW5PcHRpb24gPSB0aGlzLm9wZW5sb2dpbk9wdGlvbnMpICE9PSBudWxsICYmIF90aGlzJG9wZW5sb2dpbk9wdGlvbiAhPT0gdm9pZCAwICYmIF90aGlzJG9wZW5sb2dpbk9wdGlvbi5jbGllbnRJZCkpIHRocm93IFdhbGxldEluaXRpYWxpemF0aW9uRXJyb3IuaW52YWxpZFBhcmFtcyhcImNsaWVudElkIGlzIHJlcXVpcmVkIGJlZm9yZSBvcGVubG9naW4ncyBpbml0aWFsaXphdGlvblwiKTtcbiAgICBpZiAoIXRoaXMuY2hhaW5Db25maWcgJiYgdGhpcy5jdXJyZW50Q2hhaW5OYW1lc3BhY2UgIT09IENIQUlOX05BTUVTUEFDRVMuT1RIRVIpIHRocm93IFdhbGxldEluaXRpYWxpemF0aW9uRXJyb3IuaW52YWxpZFBhcmFtcyhcImNoYWluQ29uZmlnIGlzIHJlcXVpcmVkIGJlZm9yZSBpbml0aWFsaXphdGlvblwiKTtcbiAgICBsZXQgaXNSZWRpcmVjdFJlc3VsdCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMub3BlbmxvZ2luT3B0aW9ucy51eE1vZGUgPT09IFVYX01PREUuUkVESVJFQ1QpIHtcbiAgICAgIGNvbnN0IHJlZGlyZWN0UmVzdWx0ID0gZ2V0SGFzaFF1ZXJ5UGFyYW1zKCk7XG5cbiAgICAgIGlmIChPYmplY3Qua2V5cyhyZWRpcmVjdFJlc3VsdCkubGVuZ3RoID4gMCAmJiByZWRpcmVjdFJlc3VsdC5fcGlkKSB7XG4gICAgICAgIGlzUmVkaXJlY3RSZXN1bHQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3BlbmxvZ2luT3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5vcGVubG9naW5PcHRpb25zKSwge30sIHtcbiAgICAgIHJlcGxhY2VVcmxPblJlZGlyZWN0OiBpc1JlZGlyZWN0UmVzdWx0XG4gICAgfSk7XG4gICAgdGhpcy5vcGVubG9naW5JbnN0YW5jZSA9IG5ldyBPcGVuTG9naW4odGhpcy5vcGVubG9naW5PcHRpb25zKTtcbiAgICBsb2cuZGVidWcoXCJpbml0aWFsaXppbmcgb3BlbmxvZ2luIGFkYXB0ZXIgaW5pdFwiKTtcbiAgICBhd2FpdCB0aGlzLm9wZW5sb2dpbkluc3RhbmNlLmluaXQoKTtcbiAgICB0aGlzLnN0YXR1cyA9IEFEQVBURVJfU1RBVFVTLlJFQURZO1xuICAgIHRoaXMuZW1pdChBREFQVEVSX0VWRU5UUy5SRUFEWSwgV0FMTEVUX0FEQVBURVJTLk9QRU5MT0dJTik7XG5cbiAgICB0cnkge1xuICAgICAgbG9nLmRlYnVnKFwiaW5pdGlhbGl6aW5nIG9wZW5sb2dpbiBhZGFwdGVyXCIpOyAvLyBjb25uZWN0IG9ubHkgaWYgaXQgaXMgcmVkaXJlY3QgcmVzdWx0IG9yIGlmIGNvbm5lY3QgKGFkYXB0ZXIgaXMgY2FjaGVkL2FscmVhZHkgY29ubmVjdGVkIGluIHNhbWUgc2Vzc2lvbikgaXMgdHJ1ZVxuXG4gICAgICBpZiAodGhpcy5vcGVubG9naW5JbnN0YW5jZS5wcml2S2V5ICYmIChvcHRpb25zLmF1dG9Db25uZWN0IHx8IGlzUmVkaXJlY3RSZXN1bHQpKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuY29ubmVjdCgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoXCJGYWlsZWQgdG8gY29ubmVjdCB3aXRoIGNhY2hlZCBvcGVubG9naW4gcHJvdmlkZXJcIiwgZXJyb3IpO1xuICAgICAgdGhpcy5lbWl0KFwiRVJST1JFRFwiLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY29ubmVjdChwYXJhbXMpIHtcbiAgICBzdXBlci5jaGVja0Nvbm5lY3Rpb25SZXF1aXJlbWVudHMoKTtcbiAgICB0aGlzLnN0YXR1cyA9IEFEQVBURVJfU1RBVFVTLkNPTk5FQ1RJTkc7XG4gICAgdGhpcy5lbWl0KEFEQVBURVJfRVZFTlRTLkNPTk5FQ1RJTkcsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcGFyYW1zKSwge30sIHtcbiAgICAgIGFkYXB0ZXI6IFdBTExFVF9BREFQVEVSUy5PUEVOTE9HSU5cbiAgICB9KSk7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5jb25uZWN0V2l0aFByb3ZpZGVyKHBhcmFtcyk7XG4gICAgICByZXR1cm4gdGhpcy5wcm92aWRlcjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLmVycm9yKFwiRmFpbGVkIHRvIGNvbm5lY3Qgd2l0aCBvcGVubG9naW4gcHJvdmlkZXJcIiwgZXJyb3IpOyAvLyByZWFkeSBhZ2FpbiB0byBiZSBjb25uZWN0ZWRcblxuICAgICAgdGhpcy5zdGF0dXMgPSBBREFQVEVSX1NUQVRVUy5SRUFEWTtcbiAgICAgIHRoaXMuZW1pdChBREFQVEVSX0VWRU5UUy5FUlJPUkVELCBlcnJvcik7XG5cbiAgICAgIGlmIChlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwICYmIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoXCJ1c2VyIGNsb3NlZCBwb3B1cFwiKSkge1xuICAgICAgICB0aHJvdyBXYWxsZXRMb2dpbkVycm9yLnBvcHVwQ2xvc2VkKCk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IFdhbGxldExvZ2luRXJyb3IuY29ubmVjdGlvbkVycm9yKFwiRmFpbGVkIHRvIGxvZ2luIHdpdGggb3BlbmxvZ2luXCIpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRpc2Nvbm5lY3QoKSB7XG4gICAgbGV0IG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHtcbiAgICAgIGNsZWFudXA6IGZhbHNlXG4gICAgfTtcbiAgICBpZiAodGhpcy5zdGF0dXMgIT09IEFEQVBURVJfU1RBVFVTLkNPTk5FQ1RFRCkgdGhyb3cgV2FsbGV0TG9naW5FcnJvci5ub3RDb25uZWN0ZWRFcnJvcihcIk5vdCBjb25uZWN0ZWQgd2l0aCB3YWxsZXRcIik7XG4gICAgaWYgKCF0aGlzLm9wZW5sb2dpbkluc3RhbmNlKSB0aHJvdyBXYWxsZXRJbml0aWFsaXphdGlvbkVycm9yLm5vdFJlYWR5KFwib3BlbmxvZ2luSW5zdGFuY2UgaXMgbm90IHJlYWR5XCIpO1xuICAgIGF3YWl0IHRoaXMub3BlbmxvZ2luSW5zdGFuY2UubG9nb3V0KCk7XG5cbiAgICBpZiAob3B0aW9ucy5jbGVhbnVwKSB7XG4gICAgICB0aGlzLnN0YXR1cyA9IEFEQVBURVJfU1RBVFVTLk5PVF9SRUFEWTtcbiAgICAgIHRoaXMub3BlbmxvZ2luSW5zdGFuY2UgPSBudWxsO1xuICAgICAgdGhpcy5wcml2S2V5UHJvdmlkZXIgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZWFkeSB0byBiZSBjb25uZWN0ZWQgYWdhaW5cbiAgICAgIHRoaXMuc3RhdHVzID0gQURBUFRFUl9TVEFUVVMuUkVBRFk7XG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KEFEQVBURVJfRVZFTlRTLkRJU0NPTk5FQ1RFRCk7XG4gIH1cblxuICBhc3luYyBnZXRVc2VySW5mbygpIHtcbiAgICBpZiAodGhpcy5zdGF0dXMgIT09IEFEQVBURVJfU1RBVFVTLkNPTk5FQ1RFRCkgdGhyb3cgV2FsbGV0TG9naW5FcnJvci5ub3RDb25uZWN0ZWRFcnJvcihcIk5vdCBjb25uZWN0ZWQgd2l0aCB3YWxsZXRcIik7XG4gICAgaWYgKCF0aGlzLm9wZW5sb2dpbkluc3RhbmNlKSB0aHJvdyBXYWxsZXRJbml0aWFsaXphdGlvbkVycm9yLm5vdFJlYWR5KFwib3BlbmxvZ2luSW5zdGFuY2UgaXMgbm90IHJlYWR5XCIpO1xuICAgIGNvbnN0IHVzZXJJbmZvID0gYXdhaXQgdGhpcy5vcGVubG9naW5JbnN0YW5jZS5nZXRVc2VySW5mbygpO1xuICAgIHJldHVybiB1c2VySW5mbztcbiAgfSAvLyBzaG91bGQgYmUgY2FsbGVkIG9ubHkgYmVmb3JlIGluaXRpYWxpemF0aW9uLlxuXG5cbiAgc2V0QWRhcHRlclNldHRpbmdzKGFkYXB0ZXJTZXR0aW5ncykge1xuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gQURBUFRFUl9TVEFUVVMuUkVBRFkpIHJldHVybjtcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldE9wZW5sb2dpbkRlZmF1bHRPcHRpb25zKCk7XG4gICAgdGhpcy5vcGVubG9naW5PcHRpb25zID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRlZmF1bHRPcHRpb25zLmFkYXB0ZXJTZXR0aW5ncyksIHRoaXMub3BlbmxvZ2luT3B0aW9ucyB8fCB7fSksIGFkYXB0ZXJTZXR0aW5ncyk7XG4gIH0gLy8gc2hvdWxkIGJlIGNhbGxlZCBvbmx5IGJlZm9yZSBpbml0aWFsaXphdGlvbi5cblxuXG4gIHNldENoYWluQ29uZmlnKGN1c3RvbUNoYWluQ29uZmlnKSB7XG4gICAgc3VwZXIuc2V0Q2hhaW5Db25maWcoY3VzdG9tQ2hhaW5Db25maWcpO1xuICAgIHRoaXMuY3VycmVudENoYWluTmFtZXNwYWNlID0gY3VzdG9tQ2hhaW5Db25maWcuY2hhaW5OYW1lc3BhY2U7XG4gIH1cblxuICBhc3luYyBjb25uZWN0V2l0aFByb3ZpZGVyKHBhcmFtcykge1xuICAgIGlmICghdGhpcy5jaGFpbkNvbmZpZykgdGhyb3cgV2FsbGV0SW5pdGlhbGl6YXRpb25FcnJvci5pbnZhbGlkUGFyYW1zKFwiY2hhaW5Db25maWcgaXMgcmVxdWlyZWQgYmVmb3JlIGluaXRpYWxpemF0aW9uXCIpO1xuICAgIGlmICghdGhpcy5vcGVubG9naW5JbnN0YW5jZSkgdGhyb3cgV2FsbGV0SW5pdGlhbGl6YXRpb25FcnJvci5ub3RSZWFkeShcIm9wZW5sb2dpbkluc3RhbmNlIGlzIG5vdCByZWFkeVwiKTtcblxuICAgIGlmICh0aGlzLmN1cnJlbnRDaGFpbk5hbWVzcGFjZSA9PT0gQ0hBSU5fTkFNRVNQQUNFUy5TT0xBTkEpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgU29sYW5hUHJpdmF0ZUtleVByb3ZpZGVyXG4gICAgICB9ID0gYXdhaXQgaW1wb3J0KCdAd2ViM2F1dGgvc29sYW5hLXByb3ZpZGVyJyk7XG4gICAgICB0aGlzLnByaXZLZXlQcm92aWRlciA9IG5ldyBTb2xhbmFQcml2YXRlS2V5UHJvdmlkZXIoe1xuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICBjaGFpbkNvbmZpZzogdGhpcy5jaGFpbkNvbmZpZ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudENoYWluTmFtZXNwYWNlID09PSBDSEFJTl9OQU1FU1BBQ0VTLkVJUDE1NSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBFdGhlcmV1bVByaXZhdGVLZXlQcm92aWRlclxuICAgICAgfSA9IGF3YWl0IGltcG9ydCgnQHdlYjNhdXRoL2V0aGVyZXVtLXByb3ZpZGVyJyk7XG4gICAgICB0aGlzLnByaXZLZXlQcm92aWRlciA9IG5ldyBFdGhlcmV1bVByaXZhdGVLZXlQcm92aWRlcih7XG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgIGNoYWluQ29uZmlnOiB0aGlzLmNoYWluQ29uZmlnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50Q2hhaW5OYW1lc3BhY2UgPT09IENIQUlOX05BTUVTUEFDRVMuT1RIRVIpIHtcbiAgICAgIHRoaXMucHJpdktleVByb3ZpZGVyID0gbmV3IENvbW1vblByaXZhdGVLZXlQcm92aWRlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNoYWluTmFtZXNwYWNlOiBcIi5jb25jYXQodGhpcy5jdXJyZW50Q2hhaW5OYW1lc3BhY2UsIFwiIGZvdW5kIHdoaWxlIGNvbm5lY3RpbmcgdG8gd2FsbGV0XCIpKTtcbiAgICB9IC8vIGlmIG5vdCBsb2dnZWQgaW4gdGhlbiBsb2dpblxuXG5cbiAgICBpZiAoIXRoaXMub3BlbmxvZ2luSW5zdGFuY2UucHJpdktleSAmJiBwYXJhbXMpIHtcbiAgICAgIHZhciBfcGFyYW1zJGV4dHJhTG9naW5PcHQ7XG5cbiAgICAgIGF3YWl0IHRoaXMub3BlbmxvZ2luSW5zdGFuY2UubG9naW4obWVyZ2UodGhpcy5sb2dpblNldHRpbmdzLCB7XG4gICAgICAgIGxvZ2luUHJvdmlkZXI6IHBhcmFtcy5sb2dpblByb3ZpZGVyXG4gICAgICB9LCB7XG4gICAgICAgIGV4dHJhTG9naW5PcHRpb25zOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHBhcmFtcy5leHRyYUxvZ2luT3B0aW9ucyB8fCB7fSksIHt9LCB7XG4gICAgICAgICAgbG9naW5faGludDogcGFyYW1zLmxvZ2luX2hpbnQgfHwgKChfcGFyYW1zJGV4dHJhTG9naW5PcHQgPSBwYXJhbXMuZXh0cmFMb2dpbk9wdGlvbnMpID09PSBudWxsIHx8IF9wYXJhbXMkZXh0cmFMb2dpbk9wdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3BhcmFtcyRleHRyYUxvZ2luT3B0LmxvZ2luX2hpbnQpXG4gICAgICAgIH0pXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgbGV0IGZpbmFsUHJpdktleSA9IHRoaXMub3BlbmxvZ2luSW5zdGFuY2UucHJpdktleTtcblxuICAgIGlmIChmaW5hbFByaXZLZXkpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRDaGFpbk5hbWVzcGFjZSA9PT0gQ0hBSU5fTkFNRVNQQUNFUy5TT0xBTkEpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGdldEVEMjU1MTlLZXlcbiAgICAgICAgfSA9IGF3YWl0IGltcG9ydCgnQHRvcnVzbGFicy9vcGVubG9naW4tZWQyNTUxOScpO1xuICAgICAgICBmaW5hbFByaXZLZXkgPSBnZXRFRDI1NTE5S2V5KGZpbmFsUHJpdktleSkuc2sudG9TdHJpbmcoXCJoZXhcIik7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRoaXMucHJpdktleVByb3ZpZGVyLnNldHVwUHJvdmlkZXIoZmluYWxQcml2S2V5KTtcbiAgICAgIHRoaXMuc3RhdHVzID0gQURBUFRFUl9TVEFUVVMuQ09OTkVDVEVEO1xuICAgICAgdGhpcy5lbWl0KEFEQVBURVJfRVZFTlRTLkNPTk5FQ1RFRCwge1xuICAgICAgICBhZGFwdGVyOiBXQUxMRVRfQURBUFRFUlMuT1BFTkxPR0lOLFxuICAgICAgICByZWNvbm5lY3RlZDogIXBhcmFtc1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IHsgT3BlbmxvZ2luQWRhcHRlciwgZ2V0T3BlbmxvZ2luRGVmYXVsdE9wdGlvbnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5sb2dpbkFkYXB0ZXIuZXNtLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/openlogin-adapter/dist/openloginAdapter.esm.js\n");

/***/ }),

/***/ "./node_modules/@web3auth/openlogin-adapter/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/openlogin-adapter/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js ***!
  \*******************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BasePostMessageStream\": function() { return /* binding */ BasePostMessageStream; },\n/* harmony export */   \"IGNORE_SUBSTREAM\": function() { return /* binding */ IGNORE_SUBSTREAM; },\n/* harmony export */   \"JRPCEngine\": function() { return /* binding */ JRPCEngine; },\n/* harmony export */   \"ObjectMultiplex\": function() { return /* binding */ ObjectMultiplex; },\n/* harmony export */   \"PostMessageStream\": function() { return /* binding */ PostMessageStream; },\n/* harmony export */   \"SafeEventEmitter\": function() { return /* binding */ SafeEventEmitter; },\n/* harmony export */   \"SerializableError\": function() { return /* binding */ SerializableError; },\n/* harmony export */   \"Substream\": function() { return /* binding */ Substream; },\n/* harmony export */   \"createAsyncMiddleware\": function() { return /* binding */ createAsyncMiddleware; },\n/* harmony export */   \"createEngineStream\": function() { return /* binding */ createEngineStream; },\n/* harmony export */   \"createErrorMiddleware\": function() { return /* binding */ createErrorMiddleware; },\n/* harmony export */   \"createIdRemapMiddleware\": function() { return /* binding */ createIdRemapMiddleware; },\n/* harmony export */   \"createLoggerMiddleware\": function() { return /* binding */ createLoggerMiddleware; },\n/* harmony export */   \"createScaffoldMiddleware\": function() { return /* binding */ createScaffoldMiddleware; },\n/* harmony export */   \"createStreamMiddleware\": function() { return /* binding */ createStreamMiddleware; },\n/* harmony export */   \"getRpcPromiseCallback\": function() { return /* binding */ getRpcPromiseCallback; },\n/* harmony export */   \"mergeMiddleware\": function() { return /* binding */ mergeMiddleware; },\n/* harmony export */   \"setupMultiplex\": function() { return /* binding */ setupMultiplex; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! readable-stream */ \"./node_modules/readable-stream/readable-browser.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(readable_stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-utils */ \"./node_modules/@web3auth/openlogin-adapter/node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fast-safe-stringify */ \"./node_modules/fast-safe-stringify/index.js\");\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eth-rpc-errors */ \"./node_modules/eth-rpc-errors/dist/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! end-of-stream */ \"./node_modules/end-of-stream/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(end_of_stream__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! once */ \"./node_modules/once/once.js\");\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(once__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pump */ \"./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_init\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_haveSyn\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_name\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_target\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_targetWindow\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_targetOrigin\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_onMessage\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends events__WEBPACK_IMPORTED_MODULE_3__.EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"code\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4___default()({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = (0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_2__.randomId)();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = (0,eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = (0,eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_parent\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_substreams\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once__WEBPACK_IMPORTED_MODULE_7___default()(_cb);\n  end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n    readable: false\n  }, cb);\n  end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump__WEBPACK_IMPORTED_MODULE_8___default()(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\n\n//# sourceMappingURL=openloginJrpc.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/openlogin-adapter/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\n");

/***/ }),

/***/ "./node_modules/@web3auth/openlogin-adapter/node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/openlogin-adapter/node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"URLWithHashParams\": function() { return /* binding */ URLWithHashParams; },\n/* harmony export */   \"base64toJSON\": function() { return /* binding */ base64toJSON; },\n/* harmony export */   \"base64url\": function() { return /* binding */ base64url; },\n/* harmony export */   \"jsonToBase64\": function() { return /* binding */ jsonToBase64; },\n/* harmony export */   \"keccak\": function() { return /* binding */ keccak; },\n/* harmony export */   \"keccak256\": function() { return /* binding */ keccak256; },\n/* harmony export */   \"randomId\": function() { return /* binding */ randomId; },\n/* harmony export */   \"safeatob\": function() { return /* binding */ safeatob; },\n/* harmony export */   \"safebtoa\": function() { return /* binding */ safebtoa; }\n/* harmony export */ });\n/* harmony import */ var randombytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! randombytes */ \"./node_modules/randombytes/browser.js\");\n/* harmony import */ var randombytes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(randombytes__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! base64url */ \"./node_modules/base64url/index.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(base64url__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var keccak__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! keccak */ \"./node_modules/keccak/js.js\");\n/* harmony import */ var keccak__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(keccak__WEBPACK_IMPORTED_MODULE_3__);\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n// TODO: should be crypto safe\nconst randomId = () => randombytes__WEBPACK_IMPORTED_MODULE_0___default()(32).toString(\"hex\");\n\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, \"hashParams\", new URLSearchParams());\n  }\n\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n\n}\n\nconst base64url = (base64url__WEBPACK_IMPORTED_MODULE_2___default());\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nconst keccak = (keccak__WEBPACK_IMPORTED_MODULE_3___default());\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n  let input = str;\n\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n\n  const data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\n\n\n//# sourceMappingURL=openloginUtils.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL29wZW5sb2dpbi1hZGFwdGVyL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL29wZW5sb2dpbi11dGlscy9kaXN0L29wZW5sb2dpblV0aWxzLmVzbS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFzQztBQUM4QjtBQUMvQjtBQUNOOztBQUUvQjtBQUNBLHVCQUF1QixrREFBVzs7QUFFbEM7QUFDQTtBQUNBOztBQUVBLElBQUksaUZBQWU7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsa0JBQWtCLGtEQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrQ0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCOztBQUVBO0FBQ0E7QUFDQTs7QUFFcUg7QUFDckgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0B3ZWIzYXV0aC9vcGVubG9naW4tYWRhcHRlci9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9vcGVubG9naW4tdXRpbHMvZGlzdC9vcGVubG9naW5VdGlscy5lc20uanM/MWRiMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmFuZG9tYnl0ZXMgZnJvbSAncmFuZG9tYnl0ZXMnO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBiYXNlNjR1cmxMaWIgZnJvbSAnYmFzZTY0dXJsJztcbmltcG9ydCBrZWNjYWtMaWIgZnJvbSAna2VjY2FrJztcblxuLy8gVE9ETzogc2hvdWxkIGJlIGNyeXB0byBzYWZlXG5jb25zdCByYW5kb21JZCA9ICgpID0+IHJhbmRvbWJ5dGVzKDMyKS50b1N0cmluZyhcImhleFwiKTtcblxuY2xhc3MgVVJMV2l0aEhhc2hQYXJhbXMgZXh0ZW5kcyBVUkwge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaGFzaFBhcmFtc1wiLCBuZXcgVVJMU2VhcmNoUGFyYW1zKCkpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgdGhpcy5oYXNoID0gdGhpcy5oYXNoUGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHN1cGVyLnRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH1cblxufVxuXG5jb25zdCBiYXNlNjR1cmwgPSBiYXNlNjR1cmxMaWI7XG5mdW5jdGlvbiBzYWZlYnRvYShzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NHVybC5lbmNvZGUoc3RyKTtcbn1cbmZ1bmN0aW9uIHNhZmVhdG9iKHN0cikge1xuICAvLyBHb2luZyBiYWNrd2FyZHM6IGZyb20gYnl0ZXN0cmVhbSwgdG8gcGVyY2VudC1lbmNvZGluZywgdG8gb3JpZ2luYWwgc3RyaW5nLlxuICByZXR1cm4gYmFzZTY0dXJsLmRlY29kZShzdHIpO1xufVxuY29uc3Qga2VjY2FrID0ga2VjY2FrTGliO1xuZnVuY3Rpb24gYmFzZTY0dG9KU09OKGI2NHN0cikge1xuICByZXR1cm4gSlNPTi5wYXJzZShiYXNlNjR1cmwuZGVjb2RlKGI2NHN0cikpO1xufVxuZnVuY3Rpb24ganNvblRvQmFzZTY0KGpzb24pIHtcbiAgcmV0dXJuIGJhc2U2NHVybC5lbmNvZGUoSlNPTi5zdHJpbmdpZnkoanNvbikpO1xufVxuZnVuY3Rpb24ga2VjY2FrMjU2KHN0cikge1xuICBsZXQgaW5wdXQgPSBzdHI7XG5cbiAgaWYgKHR5cGVvZiBzdHIgPT09IFwic3RyaW5nXCIgJiYgc3RyLnNsaWNlKDAsIDIpID09PSBcIjB4XCIgJiYgc3RyLmxlbmd0aCA9PT0gNjYpIHtcbiAgICBpbnB1dCA9IEJ1ZmZlci5mcm9tKHN0ci5zbGljZSgyKSwgXCJoZXhcIik7XG4gIH1cblxuICBjb25zdCBkYXRhID0gXCIweFwiLmNvbmNhdChrZWNjYWsoXCJrZWNjYWsyNTZcIikudXBkYXRlKGlucHV0KS5kaWdlc3QoXCJoZXhcIikucGFkU3RhcnQoNjQsIFwiMFwiKSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG5leHBvcnQgeyBVUkxXaXRoSGFzaFBhcmFtcywgYmFzZTY0dG9KU09OLCBiYXNlNjR1cmwsIGpzb25Ub0Jhc2U2NCwga2VjY2FrLCBrZWNjYWsyNTYsIHJhbmRvbUlkLCBzYWZlYXRvYiwgc2FmZWJ0b2EgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZW5sb2dpblV0aWxzLmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/openlogin-adapter/node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\n");

/***/ }),

/***/ "./node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/dist/base.esm.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/dist/base.esm.js ***!
  \***********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ADAPTER_CATEGORY\": function() { return /* binding */ ADAPTER_CATEGORY; },\n/* harmony export */   \"ADAPTER_EVENTS\": function() { return /* binding */ ADAPTER_EVENTS; },\n/* harmony export */   \"ADAPTER_NAMESPACES\": function() { return /* binding */ ADAPTER_NAMESPACES; },\n/* harmony export */   \"ADAPTER_STATUS\": function() { return /* binding */ ADAPTER_STATUS; },\n/* harmony export */   \"BaseAdapter\": function() { return /* binding */ BaseAdapter; },\n/* harmony export */   \"BaseNetworkSwitch\": function() { return /* binding */ BaseNetworkSwitch; },\n/* harmony export */   \"CHAIN_NAMESPACES\": function() { return /* binding */ CHAIN_NAMESPACES; },\n/* harmony export */   \"DEFAULT_INFURA_ID\": function() { return /* binding */ DEFAULT_INFURA_ID; },\n/* harmony export */   \"EVM_ADAPTERS\": function() { return /* binding */ EVM_ADAPTERS; },\n/* harmony export */   \"MULTI_CHAIN_ADAPTERS\": function() { return /* binding */ MULTI_CHAIN_ADAPTERS; },\n/* harmony export */   \"PROVIDER_EVENTS\": function() { return /* binding */ PROVIDER_EVENTS; },\n/* harmony export */   \"SOLANA_ADAPTERS\": function() { return /* binding */ SOLANA_ADAPTERS; },\n/* harmony export */   \"WALLET_ADAPTERS\": function() { return /* binding */ WALLET_ADAPTERS; },\n/* harmony export */   \"WalletInitializationError\": function() { return /* binding */ WalletInitializationError; },\n/* harmony export */   \"WalletLoginError\": function() { return /* binding */ WalletLoginError; },\n/* harmony export */   \"Web3AuthError\": function() { return /* binding */ Web3AuthError; },\n/* harmony export */   \"getChainConfig\": function() { return /* binding */ getChainConfig; },\n/* harmony export */   \"getEvmChainConfig\": function() { return /* binding */ getEvmChainConfig; },\n/* harmony export */   \"getSolanaChainConfig\": function() { return /* binding */ getSolanaChainConfig; },\n/* harmony export */   \"isHexStrict\": function() { return /* binding */ isHexStrict; },\n/* harmony export */   \"log\": function() { return /* binding */ loglevel; },\n/* harmony export */   \"storageAvailable\": function() { return /* binding */ storageAvailable; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"./node_modules/@web3auth/openlogin-adapter/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var ts_custom_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ts-custom-error */ \"./node_modules/ts-custom-error/dist/custom-error.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nconst CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\"\n};\nconst ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\"\n};\n\nconst DEFAULT_INFURA_ID = \"776218ac4734478c90191dde8cae483c\";\n\nconst getDefaultNetworkId = chainNamespace => {\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return 1;\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return 1;\n  }\n\n  throw new Error(\"Chain namespace \".concat(chainNamespace, \" is not supported\"));\n};\n\nconst getEvmChainConfig = chainId => {\n  const chainNamespace = CHAIN_NAMESPACES.EIP155;\n\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: \"https://mainnet.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"Ethereum Mainnet\",\n      blockExplorer: \"https://etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: \"https://ropsten.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"ropsten\",\n      blockExplorer: \"https://ropsten.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 4) {\n    return {\n      chainNamespace,\n      chainId: \"0x4\",\n      rpcTarget: \"https://rinkeby.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"rinkeby\",\n      blockExplorer: \"https://rinkeby.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 5) {\n    return {\n      chainNamespace,\n      chainId: \"0x5\",\n      rpcTarget: \"https://goerli.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"goerli\",\n      blockExplorer: \"https://goerli.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 42) {\n    return {\n      chainNamespace,\n      chainId: \"0x2a\",\n      rpcTarget: \"https://kovan.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"kovan\",\n      blockExplorer: \"https://kovan.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 137) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://polygon-rpc.com\",\n      blockExplorer: \"https://polygonscan.com\",\n      chainId: \"0x89\",\n      displayName: \"Polygon Mainnet\",\n      ticker: \"matic\",\n      tickerName: \"matic\"\n    };\n  } else if (chainId === 80001) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://rpc-mumbai.maticvigil.com\",\n      blockExplorer: \"https://mumbai-explorer.matic.today\",\n      chainId: \"0x13881\",\n      displayName: \"Polygon Mumbai Testnet\",\n      ticker: \"matic\",\n      tickerName: \"matic\"\n    };\n  } else if (chainId === 56) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://bsc-dataseed.binance.org\",\n      blockExplorer: \"https://bscscan.com\",\n      chainId: \"0x38\",\n      displayName: \"Binance SmartChain Mainnet\",\n      ticker: \"BNB\",\n      tickerName: \"BNB\"\n    };\n  } else if (chainId === 97) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://data-seed-prebsc-2-s3.binance.org:8545\",\n      blockExplorer: \"https://testnet.bscscan.com\",\n      chainId: \"0x61\",\n      displayName: \"Binance SmartChain Testnet\",\n      ticker: \"BNB\",\n      tickerName: \"BNB\"\n    };\n  }\n\n  return null;\n};\nconst getSolanaChainConfig = chainId => {\n  const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      blockExplorer: \"https://explorer.solana.com\",\n      chainId: \"0x1\",\n      displayName: \"Solana Mainnet\",\n      rpcTarget: \"https://api.mainnet-beta.solana.com\",\n      ticker: \"SOL\",\n      tickerName: \"Solana Token\"\n    };\n  } else if (chainId === 2) {\n    return {\n      rpcTarget: \"https://api.testnet.solana.com\",\n      blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n      chainId: \"0x2\",\n      chainNamespace,\n      displayName: \"testnet\",\n      ticker: \"SOL\",\n      tickerName: \"solana\"\n    };\n  } else if (chainId === 3) {\n    return {\n      rpcTarget: \"https://api.devnet.solana.com\",\n      blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n      chainId: \"0x3\",\n      chainNamespace,\n      displayName: \"devnet\",\n      ticker: \"SOL\",\n      tickerName: \"solana\"\n    };\n  }\n\n  return null;\n};\nconst getChainConfig = (chainNamespace, chainId) => {\n  if (chainNamespace === CHAIN_NAMESPACES.OTHER) return null;\n  const finalChainId = chainId ? typeof chainId === \"number\" ? chainId : parseInt(chainId, 16) : getDefaultNetworkId(chainNamespace);\n\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return getEvmChainConfig(finalChainId);\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return getSolanaChainConfig(finalChainId);\n  }\n\n  return null;\n};\n\nclass Web3AuthError extends ts_custom_error__WEBPACK_IMPORTED_MODULE_2__.CustomError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(message);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"code\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"message\", void 0);\n\n    this.code = code;\n    this.message = message || \"\"; // Set name explicitly as minification can mangle class names\n\n    Object.defineProperty(this, \"name\", {\n      value: \"Web3AuthError\"\n    });\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message\n    };\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n\n}\nclass WalletInitializationError extends Web3AuthError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message); // Set name explicitly as minification can mangle class names\n\n    Object.defineProperty(this, \"name\", {\n      value: \"WalletInitializationError\"\n    });\n  }\n\n  static fromCode(code) {\n    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    return new WalletInitializationError(code, \"\".concat(WalletInitializationError.messages[code], \", \").concat(extraMessage));\n  } // Custom methods\n\n\n  static notFound() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  static notInstalled() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  static notReady() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  static windowBlocked() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  static windowClosed() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  static incompatibleChainNameSpace() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  static duplicateAdapterError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  static invalidProviderConfigError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  static providerNotReadyError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  static rpcConnectionError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  static invalidParams() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  static invalidNetwork() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n\n}\n/**\n * wallet login errors\n */\n\n(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(WalletInitializationError, \"messages\", {\n  5000: \"Custom\",\n  5001: \"Wallet is not found\",\n  5002: \"Wallet is not installed\",\n  5003: \"Wallet is not ready yet\",\n  5004: \"Wallet window is blocked\",\n  5005: \"Wallet window has been closed by the user\",\n  5006: \"Incompatible chain namespace provided\",\n  5007: \"Adapter has already been included\",\n  5008: \"Invalid provider Config\",\n  5009: \"Provider is not ready yet\",\n  5010: \"Failed to connect with rpc url\",\n  5011: \"Invalid params passed in\",\n  5013: \"Invalid network provided\"\n});\n\nclass WalletLoginError extends Web3AuthError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message); // Set name explicitly as minification can mangle class names\n\n    Object.defineProperty(this, \"name\", {\n      value: \"WalletLoginError\"\n    });\n  }\n\n  static fromCode(code) {\n    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    return new WalletLoginError(code, \"\".concat(WalletLoginError.messages[code]).concat(extraMessage));\n  }\n\n  static connectionError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  static disconnectionError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  static notConnectedError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  static popupClosed() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n\n}\n\n(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(WalletLoginError, \"messages\", {\n  5000: \"Custom\",\n  5111: \"Failed to connect with wallet\",\n  5112: \"Failed to disconnect from wallet\",\n  5113: \"Wallet is not connected\",\n  5114: \"Wallet popup has been closed by the user\"\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nconst MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\"\n};\nconst SOLANA_ADAPTERS = _objectSpread$1({\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLLET: \"sollet\",\n  SOLLET_EXTENSION: \"sollet-extension\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\"\n}, MULTI_CHAIN_ADAPTERS);\nconst EVM_ADAPTERS = _objectSpread$1({\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\"\n}, MULTI_CHAIN_ADAPTERS);\nconst WALLET_ADAPTERS = _objectSpread$1(_objectSpread$1({}, EVM_ADAPTERS), SOLANA_ADAPTERS);\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\"\n};\nconst ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\"\n};\nconst ADAPTER_EVENTS = _objectSpread(_objectSpread({}, ADAPTER_STATUS), {}, {\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\"\n});\nclass BaseAdapter extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.SafeEventEmitter {\n  constructor() {\n    super(...arguments);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"adapterData\", {});\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"chainConfig\", null);\n  }\n\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n\n  setChainConfig(customChainConfig) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n    const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n    this.chainConfig = _objectSpread(_objectSpread({}, defaultChainConfig), customChainConfig);\n  }\n\n  setAdapterSettings(_) {}\n\n  checkConnectionRequirements() {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY) throw WalletLoginError.connectionError(\"Wallet adapter is not ready yet\");\n  }\n\n  checkInitializationRequirements() {\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  updateAdapterData(data) {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, {\n      adapterName: this.name,\n      data\n    });\n  }\n\n}\nclass BaseNetworkSwitch {}\n\nvar loglevel = loglevel__WEBPACK_IMPORTED_MODULE_3___default().getLogger(\"web3auth-logger\");\n\nconst PROVIDER_EVENTS = {\n  INITIALIZED: \"initialized\",\n  ERRORED: \"errored\"\n};\n\nfunction storageAvailable(type) {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage;\n\n  try {\n    storage = window[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error) {\n    const _error = error;\n    return !!(_error && ( // everything except Firefox\n    _error.code === 22 || // Firefox\n    _error.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    _error.name === \"QuotaExceededError\" || // Firefox\n    _error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storageExists && storageLength !== 0);\n  }\n}\nconst isHexStrict = hex => {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n\n\n//# sourceMappingURL=base.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/dist/base.esm.js\n");

/***/ })

}]);