"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_web3auth_metamask-adapter_dist_metamaskAdapter_esm_js"],{

/***/ "./node_modules/@metamask/detect-provider/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@metamask/detect-provider/dist/index.js ***!
  \**************************************************************/
/***/ (function(module) {

eval("\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider({ mustBeMetaMask = false, silent = false, timeout = 3000, } = {}) {\n    _validateInputs();\n    let handled = false;\n    return new Promise((resolve) => {\n        if (window.ethereum) {\n            handleEthereum();\n        }\n        else {\n            window.addEventListener('ethereum#initialized', handleEthereum, { once: true });\n            setTimeout(() => {\n                handleEthereum();\n            }, timeout);\n        }\n        function handleEthereum() {\n            if (handled) {\n                return;\n            }\n            handled = true;\n            window.removeEventListener('ethereum#initialized', handleEthereum);\n            const { ethereum } = window;\n            if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n                resolve(ethereum);\n            }\n            else {\n                const message = mustBeMetaMask && ethereum\n                    ? 'Non-MetaMask window.ethereum detected.'\n                    : 'Unable to detect window.ethereum.';\n                !silent && console.error('@metamask/detect-provider:', message);\n                resolve(null);\n            }\n        }\n    });\n    function _validateInputs() {\n        if (typeof mustBeMetaMask !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n        }\n        if (typeof silent !== 'boolean') {\n            throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n        }\n        if (typeof timeout !== 'number') {\n            throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n        }\n    }\n}\nmodule.exports = detectEthereumProvider;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQVlBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILFNBQVMsc0JBQXNCLENBQUMsRUFDOUIsY0FBYyxHQUFHLEtBQUssRUFDdEIsTUFBTSxHQUFHLEtBQUssRUFDZCxPQUFPLEdBQUcsSUFBSSxHQUNmLEdBQUcsRUFBRTtJQUVKLGVBQWUsRUFBRSxDQUFDO0lBRWxCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztJQUVwQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDN0IsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO1lBRW5CLGNBQWMsRUFBRSxDQUFDO1NBRWxCO2FBQU07WUFFTCxNQUFNLENBQUMsZ0JBQWdCLENBQ3JCLHNCQUFzQixFQUN0QixjQUFjLEVBQ2QsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQ2YsQ0FBQztZQUVGLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsY0FBYyxFQUFFLENBQUM7WUFDbkIsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2I7UUFFRCxTQUFTLGNBQWM7WUFFckIsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsT0FBTzthQUNSO1lBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQztZQUVmLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxzQkFBc0IsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUVuRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsTUFBTSxDQUFDO1lBRTVCLElBQUksUUFBUSxJQUFJLENBQUMsQ0FBQyxjQUFjLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbkI7aUJBQU07Z0JBRUwsTUFBTSxPQUFPLEdBQUcsY0FBYyxJQUFJLFFBQVE7b0JBQ3hDLENBQUMsQ0FBQyx3Q0FBd0M7b0JBQzFDLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQztnQkFFeEMsQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDaEUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2Y7UUFDSCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLGVBQWU7UUFDdEIsSUFBSSxPQUFPLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFDdkMsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO1NBQ2pHO1FBQ0QsSUFBSSxPQUFPLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ3pGO1FBQ0QsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRUFBc0UsQ0FBQyxDQUFDO1NBQ3pGO0lBQ0gsQ0FBQztBQUNILENBQUM7QUFsRkQsaUJBQVMsc0JBQXNCLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2RldGVjdC1wcm92aWRlci9kaXN0L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsMERBQTBELElBQUk7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsWUFBWTtBQUMxRjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFdBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL2RldGVjdC1wcm92aWRlci9kaXN0L2luZGV4LmpzPzBlZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHZhbHVlIG9mIHdpbmRvdy5ldGhlcmV1bSBpZiBpdCBpc1xuICogc2V0IHdpdGhpbiB0aGUgZ2l2ZW4gdGltZW91dCwgb3IgbnVsbC5cbiAqIFRoZSBQcm9taXNlIHdpbGwgbm90IHJlamVjdCwgYnV0IGFuIGVycm9yIHdpbGwgYmUgdGhyb3duIGlmIGludmFsaWQgb3B0aW9uc1xuICogYXJlIHByb3ZpZGVkLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBiYWcuXG4gKiBAcGFyYW0gb3B0aW9ucy5tdXN0QmVNZXRhTWFzayAtIFdoZXRoZXIgdG8gb25seSBsb29rIGZvciBNZXRhTWFzayBwcm92aWRlcnMuXG4gKiBEZWZhdWx0OiBmYWxzZVxuICogQHBhcmFtIG9wdGlvbnMuc2lsZW50IC0gV2hldGhlciB0byBzaWxlbmNlIGNvbnNvbGUgZXJyb3JzLiBEb2VzIG5vdCBhZmZlY3RcbiAqIHRocm93biBlcnJvcnMuIERlZmF1bHQ6IGZhbHNlXG4gKiBAcGFyYW0gb3B0aW9ucy50aW1lb3V0IC0gTWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yICdldGhlcmV1bSNpbml0aWFsaXplZCcgdG9cbiAqIGJlIGRpc3BhdGNoZWQuIERlZmF1bHQ6IDMwMDBcbiAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIFByb3ZpZGVyIGlmIGl0IGlzIGRldGVjdGVkIHdpdGhpblxuICogZ2l2ZW4gdGltZW91dCwgb3RoZXJ3aXNlIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGRldGVjdEV0aGVyZXVtUHJvdmlkZXIoeyBtdXN0QmVNZXRhTWFzayA9IGZhbHNlLCBzaWxlbnQgPSBmYWxzZSwgdGltZW91dCA9IDMwMDAsIH0gPSB7fSkge1xuICAgIF92YWxpZGF0ZUlucHV0cygpO1xuICAgIGxldCBoYW5kbGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGlmICh3aW5kb3cuZXRoZXJldW0pIHtcbiAgICAgICAgICAgIGhhbmRsZUV0aGVyZXVtKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXRoZXJldW0jaW5pdGlhbGl6ZWQnLCBoYW5kbGVFdGhlcmV1bSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXRoZXJldW0oKTtcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUV0aGVyZXVtKCkge1xuICAgICAgICAgICAgaWYgKGhhbmRsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdldGhlcmV1bSNpbml0aWFsaXplZCcsIGhhbmRsZUV0aGVyZXVtKTtcbiAgICAgICAgICAgIGNvbnN0IHsgZXRoZXJldW0gfSA9IHdpbmRvdztcbiAgICAgICAgICAgIGlmIChldGhlcmV1bSAmJiAoIW11c3RCZU1ldGFNYXNrIHx8IGV0aGVyZXVtLmlzTWV0YU1hc2spKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShldGhlcmV1bSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gbXVzdEJlTWV0YU1hc2sgJiYgZXRoZXJldW1cbiAgICAgICAgICAgICAgICAgICAgPyAnTm9uLU1ldGFNYXNrIHdpbmRvdy5ldGhlcmV1bSBkZXRlY3RlZC4nXG4gICAgICAgICAgICAgICAgICAgIDogJ1VuYWJsZSB0byBkZXRlY3Qgd2luZG93LmV0aGVyZXVtLic7XG4gICAgICAgICAgICAgICAgIXNpbGVudCAmJiBjb25zb2xlLmVycm9yKCdAbWV0YW1hc2svZGV0ZWN0LXByb3ZpZGVyOicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBfdmFsaWRhdGVJbnB1dHMoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbXVzdEJlTWV0YU1hc2sgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBAbWV0YW1hc2svZGV0ZWN0LXByb3ZpZGVyOiBFeHBlY3RlZCBvcHRpb24gJ211c3RCZU1ldGFNYXNrJyB0byBiZSBhIGJvb2xlYW4uYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzaWxlbnQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBAbWV0YW1hc2svZGV0ZWN0LXByb3ZpZGVyOiBFeHBlY3RlZCBvcHRpb24gJ3NpbGVudCcgdG8gYmUgYSBib29sZWFuLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQG1ldGFtYXNrL2RldGVjdC1wcm92aWRlcjogRXhwZWN0ZWQgb3B0aW9uICd0aW1lb3V0JyB0byBiZSBhIG51bWJlci5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZGV0ZWN0RXRoZXJldW1Qcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmFXNWtaWGd1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWp0QlFWbEJPenM3T3pzN096czdPenM3T3pzN1IwRmxSenRCUVVOSUxGTkJRVk1zYzBKQlFYTkNMRU5CUVVNc1JVRkRPVUlzWTBGQll5eEhRVUZITEV0QlFVc3NSVUZEZEVJc1RVRkJUU3hIUVVGSExFdEJRVXNzUlVGRFpDeFBRVUZQTEVkQlFVY3NTVUZCU1N4SFFVTm1MRWRCUVVjc1JVRkJSVHRKUVVWS0xHVkJRV1VzUlVGQlJTeERRVUZETzBsQlJXeENMRWxCUVVrc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF6dEpRVVZ3UWl4UFFVRlBMRWxCUVVrc1QwRkJUeXhEUVVGRExFTkJRVU1zVDBGQlR5eEZRVUZGTEVWQlFVVTdVVUZETjBJc1NVRkJTU3hOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTzFsQlJXNUNMR05CUVdNc1JVRkJSU3hEUVVGRE8xTkJSV3hDTzJGQlFVMDdXVUZGVEN4TlFVRk5MRU5CUVVNc1owSkJRV2RDTEVOQlEzSkNMSE5DUVVGelFpeEZRVU4wUWl4alFVRmpMRVZCUTJRc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlEyWXNRMEZCUXp0WlFVVkdMRlZCUVZVc1EwRkJReXhIUVVGSExFVkJRVVU3WjBKQlEyUXNZMEZCWXl4RlFVRkZMRU5CUVVNN1dVRkRia0lzUTBGQlF5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMU5CUTJJN1VVRkZSQ3hUUVVGVExHTkJRV003V1VGRmNrSXNTVUZCU1N4UFFVRlBMRVZCUVVVN1owSkJRMWdzVDBGQlR6dGhRVU5TTzFsQlEwUXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJRenRaUVVWbUxFMUJRVTBzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXh6UWtGQmMwSXNSVUZCUlN4alFVRmpMRU5CUVVNc1EwRkJRenRaUVVWdVJTeE5RVUZOTEVWQlFVVXNVVUZCVVN4RlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRE8xbEJSVFZDTEVsQlFVa3NVVUZCVVN4SlFVRkpMRU5CUVVNc1EwRkJReXhqUVVGakxFbEJRVWtzVVVGQlVTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZPMmRDUVVONFJDeFBRVUZQTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1lVRkRia0k3YVVKQlFVMDdaMEpCUlV3c1RVRkJUU3hQUVVGUExFZEJRVWNzWTBGQll5eEpRVUZKTEZGQlFWRTdiMEpCUTNoRExFTkJRVU1zUTBGQlF5eDNRMEZCZDBNN2IwSkJRekZETEVOQlFVTXNRMEZCUXl4dFEwRkJiVU1zUTBGQlF6dG5Ra0ZGZUVNc1EwRkJReXhOUVVGTkxFbEJRVWtzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl3MFFrRkJORUlzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0blFrRkRhRVVzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMkZCUTJZN1VVRkRTQ3hEUVVGRE8wbEJRMGdzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZGU0N4VFFVRlRMR1ZCUVdVN1VVRkRkRUlzU1VGQlNTeFBRVUZQTEdOQlFXTXNTMEZCU3l4VFFVRlRMRVZCUVVVN1dVRkRka01zVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl3NFJVRkJPRVVzUTBGQlF5eERRVUZETzFOQlEycEhPMUZCUTBRc1NVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eFRRVUZUTEVWQlFVVTdXVUZETDBJc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eHpSVUZCYzBVc1EwRkJReXhEUVVGRE8xTkJRM3BHTzFGQlEwUXNTVUZCU1N4UFFVRlBMRTlCUVU4c1MwRkJTeXhSUVVGUkxFVkJRVVU3V1VGREwwSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXh6UlVGQmMwVXNRMEZCUXl4RFFVRkRPMU5CUTNwR08wbEJRMGdzUTBGQlF6dEJRVU5JTEVOQlFVTTdRVUZzUmtRc2FVSkJRVk1zYzBKQlFYTkNMRU5CUVVNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@metamask/detect-provider/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MetamaskAdapter\": function() { return /* binding */ MetamaskAdapter; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @metamask/detect-provider */ \"./node_modules/@metamask/detect-provider/dist/index.js\");\n/* harmony import */ var _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_metamask_detect_provider__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _web3auth_base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @web3auth/base */ \"./node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/dist/base.esm.js\");\n\n\n\n\nclass MetamaskAdapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"adapterNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_NAMESPACES.EIP155);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"currentChainNamespace\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.EIP155);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"type\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_CATEGORY.EXTERNAL);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"name\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.METAMASK);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"status\", _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.NOT_READY);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"rehydrated\", false);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_1___default()({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;\n    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.READY, _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.METAMASK);\n\n    try {\n      _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"initializing metamask adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.getChainConfig)(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.CHAIN_NAMESPACES.EIP155, 1);\n    this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTING;\n    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.CONNECTING, {\n      adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.CONNECTED, {\n        adapter: _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.ERRORED, error);\n      throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.ADAPTER_STATUS.CONNECTED) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw _web3auth_base__WEBPACK_IMPORTED_MODULE_2__.WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\n\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js\n");

/***/ }),

/***/ "./node_modules/@web3auth/metamask-adapter/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/metamask-adapter/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js ***!
  \******************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BasePostMessageStream\": function() { return /* binding */ BasePostMessageStream; },\n/* harmony export */   \"IGNORE_SUBSTREAM\": function() { return /* binding */ IGNORE_SUBSTREAM; },\n/* harmony export */   \"JRPCEngine\": function() { return /* binding */ JRPCEngine; },\n/* harmony export */   \"ObjectMultiplex\": function() { return /* binding */ ObjectMultiplex; },\n/* harmony export */   \"PostMessageStream\": function() { return /* binding */ PostMessageStream; },\n/* harmony export */   \"SafeEventEmitter\": function() { return /* binding */ SafeEventEmitter; },\n/* harmony export */   \"SerializableError\": function() { return /* binding */ SerializableError; },\n/* harmony export */   \"Substream\": function() { return /* binding */ Substream; },\n/* harmony export */   \"createAsyncMiddleware\": function() { return /* binding */ createAsyncMiddleware; },\n/* harmony export */   \"createEngineStream\": function() { return /* binding */ createEngineStream; },\n/* harmony export */   \"createErrorMiddleware\": function() { return /* binding */ createErrorMiddleware; },\n/* harmony export */   \"createIdRemapMiddleware\": function() { return /* binding */ createIdRemapMiddleware; },\n/* harmony export */   \"createLoggerMiddleware\": function() { return /* binding */ createLoggerMiddleware; },\n/* harmony export */   \"createScaffoldMiddleware\": function() { return /* binding */ createScaffoldMiddleware; },\n/* harmony export */   \"createStreamMiddleware\": function() { return /* binding */ createStreamMiddleware; },\n/* harmony export */   \"getRpcPromiseCallback\": function() { return /* binding */ getRpcPromiseCallback; },\n/* harmony export */   \"mergeMiddleware\": function() { return /* binding */ mergeMiddleware; },\n/* harmony export */   \"setupMultiplex\": function() { return /* binding */ setupMultiplex; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! readable-stream */ \"./node_modules/readable-stream/readable-browser.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(readable_stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-utils */ \"./node_modules/@web3auth/metamask-adapter/node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fast-safe-stringify */ \"./node_modules/fast-safe-stringify/index.js\");\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eth-rpc-errors */ \"./node_modules/eth-rpc-errors/dist/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! end-of-stream */ \"./node_modules/end-of-stream/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(end_of_stream__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! once */ \"./node_modules/once/once.js\");\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(once__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pump */ \"./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_init\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_haveSyn\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_name\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_target\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_targetWindow\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_targetOrigin\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_onMessage\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends events__WEBPACK_IMPORTED_MODULE_3__.EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"code\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4___default()({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = (0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_2__.randomId)();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = (0,eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = (0,eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_parent\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"_substreams\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once__WEBPACK_IMPORTED_MODULE_7___default()(_cb);\n  end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n    readable: false\n  }, cb);\n  end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump__WEBPACK_IMPORTED_MODULE_8___default()(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\n\n//# sourceMappingURL=openloginJrpc.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/metamask-adapter/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\n");

/***/ }),

/***/ "./node_modules/@web3auth/metamask-adapter/node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@web3auth/metamask-adapter/node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js ***!
  \********************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"URLWithHashParams\": function() { return /* binding */ URLWithHashParams; },\n/* harmony export */   \"base64toJSON\": function() { return /* binding */ base64toJSON; },\n/* harmony export */   \"base64url\": function() { return /* binding */ base64url; },\n/* harmony export */   \"jsonToBase64\": function() { return /* binding */ jsonToBase64; },\n/* harmony export */   \"keccak\": function() { return /* binding */ keccak; },\n/* harmony export */   \"keccak256\": function() { return /* binding */ keccak256; },\n/* harmony export */   \"randomId\": function() { return /* binding */ randomId; },\n/* harmony export */   \"safeatob\": function() { return /* binding */ safeatob; },\n/* harmony export */   \"safebtoa\": function() { return /* binding */ safebtoa; }\n/* harmony export */ });\n/* harmony import */ var randombytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! randombytes */ \"./node_modules/randombytes/browser.js\");\n/* harmony import */ var randombytes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(randombytes__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! base64url */ \"./node_modules/base64url/index.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(base64url__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var keccak__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! keccak */ \"./node_modules/keccak/js.js\");\n/* harmony import */ var keccak__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(keccak__WEBPACK_IMPORTED_MODULE_3__);\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n\n\n\n\n\n// TODO: should be crypto safe\nconst randomId = () => randombytes__WEBPACK_IMPORTED_MODULE_0___default()(32).toString(\"hex\");\n\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this, \"hashParams\", new URLSearchParams());\n  }\n\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n\n}\n\nconst base64url = (base64url__WEBPACK_IMPORTED_MODULE_2___default());\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nconst keccak = (keccak__WEBPACK_IMPORTED_MODULE_3___default());\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n  let input = str;\n\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n\n  const data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\n\n\n//# sourceMappingURL=openloginUtils.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL21ldGFtYXNrLWFkYXB0ZXIvbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvb3BlbmxvZ2luLXV0aWxzL2Rpc3Qvb3BlbmxvZ2luVXRpbHMuZXNtLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNDO0FBQzhCO0FBQy9CO0FBQ047O0FBRS9CO0FBQ0EsdUJBQXVCLGtEQUFXOztBQUVsQztBQUNBO0FBQ0E7O0FBRUEsSUFBSSxpRkFBZTtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrQkFBa0Isa0RBQVk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtDQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLE1BQU07QUFDbEI7O0FBRUE7QUFDQTtBQUNBOztBQUVxSDtBQUNySCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHdlYjNhdXRoL21ldGFtYXNrLWFkYXB0ZXIvbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvb3BlbmxvZ2luLXV0aWxzL2Rpc3Qvb3BlbmxvZ2luVXRpbHMuZXNtLmpzPzE0ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJhbmRvbWJ5dGVzIGZyb20gJ3JhbmRvbWJ5dGVzJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eSc7XG5pbXBvcnQgYmFzZTY0dXJsTGliIGZyb20gJ2Jhc2U2NHVybCc7XG5pbXBvcnQga2VjY2FrTGliIGZyb20gJ2tlY2Nhayc7XG5cbi8vIFRPRE86IHNob3VsZCBiZSBjcnlwdG8gc2FmZVxuY29uc3QgcmFuZG9tSWQgPSAoKSA9PiByYW5kb21ieXRlcygzMikudG9TdHJpbmcoXCJoZXhcIik7XG5cbmNsYXNzIFVSTFdpdGhIYXNoUGFyYW1zIGV4dGVuZHMgVVJMIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImhhc2hQYXJhbXNcIiwgbmV3IFVSTFNlYXJjaFBhcmFtcygpKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHRoaXMuaGFzaCA9IHRoaXMuaGFzaFBhcmFtcy50b1N0cmluZygpO1xuICAgIHJldHVybiBzdXBlci50b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9XG5cbn1cblxuY29uc3QgYmFzZTY0dXJsID0gYmFzZTY0dXJsTGliO1xuZnVuY3Rpb24gc2FmZWJ0b2Eoc3RyKSB7XG4gIHJldHVybiBiYXNlNjR1cmwuZW5jb2RlKHN0cik7XG59XG5mdW5jdGlvbiBzYWZlYXRvYihzdHIpIHtcbiAgLy8gR29pbmcgYmFja3dhcmRzOiBmcm9tIGJ5dGVzdHJlYW0sIHRvIHBlcmNlbnQtZW5jb2RpbmcsIHRvIG9yaWdpbmFsIHN0cmluZy5cbiAgcmV0dXJuIGJhc2U2NHVybC5kZWNvZGUoc3RyKTtcbn1cbmNvbnN0IGtlY2NhayA9IGtlY2Nha0xpYjtcbmZ1bmN0aW9uIGJhc2U2NHRvSlNPTihiNjRzdHIpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoYmFzZTY0dXJsLmRlY29kZShiNjRzdHIpKTtcbn1cbmZ1bmN0aW9uIGpzb25Ub0Jhc2U2NChqc29uKSB7XG4gIHJldHVybiBiYXNlNjR1cmwuZW5jb2RlKEpTT04uc3RyaW5naWZ5KGpzb24pKTtcbn1cbmZ1bmN0aW9uIGtlY2NhazI1NihzdHIpIHtcbiAgbGV0IGlucHV0ID0gc3RyO1xuXG4gIGlmICh0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiICYmIHN0ci5zbGljZSgwLCAyKSA9PT0gXCIweFwiICYmIHN0ci5sZW5ndGggPT09IDY2KSB7XG4gICAgaW5wdXQgPSBCdWZmZXIuZnJvbShzdHIuc2xpY2UoMiksIFwiaGV4XCIpO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IFwiMHhcIi5jb25jYXQoa2VjY2FrKFwia2VjY2FrMjU2XCIpLnVwZGF0ZShpbnB1dCkuZGlnZXN0KFwiaGV4XCIpLnBhZFN0YXJ0KDY0LCBcIjBcIikpO1xuICByZXR1cm4gZGF0YTtcbn1cblxuZXhwb3J0IHsgVVJMV2l0aEhhc2hQYXJhbXMsIGJhc2U2NHRvSlNPTiwgYmFzZTY0dXJsLCBqc29uVG9CYXNlNjQsIGtlY2Nhaywga2VjY2FrMjU2LCByYW5kb21JZCwgc2FmZWF0b2IsIHNhZmVidG9hIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVubG9naW5VdGlscy5lc20uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/metamask-adapter/node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\n");

/***/ }),

/***/ "./node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/dist/base.esm.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/dist/base.esm.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ADAPTER_CATEGORY\": function() { return /* binding */ ADAPTER_CATEGORY; },\n/* harmony export */   \"ADAPTER_EVENTS\": function() { return /* binding */ ADAPTER_EVENTS; },\n/* harmony export */   \"ADAPTER_NAMESPACES\": function() { return /* binding */ ADAPTER_NAMESPACES; },\n/* harmony export */   \"ADAPTER_STATUS\": function() { return /* binding */ ADAPTER_STATUS; },\n/* harmony export */   \"BaseAdapter\": function() { return /* binding */ BaseAdapter; },\n/* harmony export */   \"BaseNetworkSwitch\": function() { return /* binding */ BaseNetworkSwitch; },\n/* harmony export */   \"CHAIN_NAMESPACES\": function() { return /* binding */ CHAIN_NAMESPACES; },\n/* harmony export */   \"DEFAULT_INFURA_ID\": function() { return /* binding */ DEFAULT_INFURA_ID; },\n/* harmony export */   \"EVM_ADAPTERS\": function() { return /* binding */ EVM_ADAPTERS; },\n/* harmony export */   \"MULTI_CHAIN_ADAPTERS\": function() { return /* binding */ MULTI_CHAIN_ADAPTERS; },\n/* harmony export */   \"PROVIDER_EVENTS\": function() { return /* binding */ PROVIDER_EVENTS; },\n/* harmony export */   \"SOLANA_ADAPTERS\": function() { return /* binding */ SOLANA_ADAPTERS; },\n/* harmony export */   \"WALLET_ADAPTERS\": function() { return /* binding */ WALLET_ADAPTERS; },\n/* harmony export */   \"WalletInitializationError\": function() { return /* binding */ WalletInitializationError; },\n/* harmony export */   \"WalletLoginError\": function() { return /* binding */ WalletLoginError; },\n/* harmony export */   \"Web3AuthError\": function() { return /* binding */ Web3AuthError; },\n/* harmony export */   \"getChainConfig\": function() { return /* binding */ getChainConfig; },\n/* harmony export */   \"getEvmChainConfig\": function() { return /* binding */ getEvmChainConfig; },\n/* harmony export */   \"getSolanaChainConfig\": function() { return /* binding */ getSolanaChainConfig; },\n/* harmony export */   \"isHexStrict\": function() { return /* binding */ isHexStrict; },\n/* harmony export */   \"log\": function() { return /* binding */ loglevel; },\n/* harmony export */   \"storageAvailable\": function() { return /* binding */ storageAvailable; }\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"./node_modules/@web3auth/metamask-adapter/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var ts_custom_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ts-custom-error */ \"./node_modules/ts-custom-error/dist/custom-error.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! loglevel */ \"./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nconst CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\"\n};\nconst ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\"\n};\n\nconst DEFAULT_INFURA_ID = \"776218ac4734478c90191dde8cae483c\";\n\nconst getDefaultNetworkId = chainNamespace => {\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return 1;\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return 1;\n  }\n\n  throw new Error(\"Chain namespace \".concat(chainNamespace, \" is not supported\"));\n};\n\nconst getEvmChainConfig = chainId => {\n  const chainNamespace = CHAIN_NAMESPACES.EIP155;\n\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: \"https://mainnet.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"Ethereum Mainnet\",\n      blockExplorer: \"https://etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: \"https://ropsten.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"ropsten\",\n      blockExplorer: \"https://ropsten.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 4) {\n    return {\n      chainNamespace,\n      chainId: \"0x4\",\n      rpcTarget: \"https://rinkeby.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"rinkeby\",\n      blockExplorer: \"https://rinkeby.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 5) {\n    return {\n      chainNamespace,\n      chainId: \"0x5\",\n      rpcTarget: \"https://goerli.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"goerli\",\n      blockExplorer: \"https://goerli.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 42) {\n    return {\n      chainNamespace,\n      chainId: \"0x2a\",\n      rpcTarget: \"https://kovan.infura.io/v3/\".concat(DEFAULT_INFURA_ID),\n      displayName: \"kovan\",\n      blockExplorer: \"https://kovan.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\"\n    };\n  } else if (chainId === 137) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://polygon-rpc.com\",\n      blockExplorer: \"https://polygonscan.com\",\n      chainId: \"0x89\",\n      displayName: \"Polygon Mainnet\",\n      ticker: \"matic\",\n      tickerName: \"matic\"\n    };\n  } else if (chainId === 80001) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://rpc-mumbai.maticvigil.com\",\n      blockExplorer: \"https://mumbai-explorer.matic.today\",\n      chainId: \"0x13881\",\n      displayName: \"Polygon Mumbai Testnet\",\n      ticker: \"matic\",\n      tickerName: \"matic\"\n    };\n  } else if (chainId === 56) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://bsc-dataseed.binance.org\",\n      blockExplorer: \"https://bscscan.com\",\n      chainId: \"0x38\",\n      displayName: \"Binance SmartChain Mainnet\",\n      ticker: \"BNB\",\n      tickerName: \"BNB\"\n    };\n  } else if (chainId === 97) {\n    return {\n      chainNamespace,\n      rpcTarget: \"https://data-seed-prebsc-2-s3.binance.org:8545\",\n      blockExplorer: \"https://testnet.bscscan.com\",\n      chainId: \"0x61\",\n      displayName: \"Binance SmartChain Testnet\",\n      ticker: \"BNB\",\n      tickerName: \"BNB\"\n    };\n  }\n\n  return null;\n};\nconst getSolanaChainConfig = chainId => {\n  const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      blockExplorer: \"https://explorer.solana.com\",\n      chainId: \"0x1\",\n      displayName: \"Solana Mainnet\",\n      rpcTarget: \"https://api.mainnet-beta.solana.com\",\n      ticker: \"SOL\",\n      tickerName: \"Solana Token\"\n    };\n  } else if (chainId === 2) {\n    return {\n      rpcTarget: \"https://api.testnet.solana.com\",\n      blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n      chainId: \"0x2\",\n      chainNamespace,\n      displayName: \"testnet\",\n      ticker: \"SOL\",\n      tickerName: \"solana\"\n    };\n  } else if (chainId === 3) {\n    return {\n      rpcTarget: \"https://api.devnet.solana.com\",\n      blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n      chainId: \"0x3\",\n      chainNamespace,\n      displayName: \"devnet\",\n      ticker: \"SOL\",\n      tickerName: \"solana\"\n    };\n  }\n\n  return null;\n};\nconst getChainConfig = (chainNamespace, chainId) => {\n  if (chainNamespace === CHAIN_NAMESPACES.OTHER) return null;\n  const finalChainId = chainId ? typeof chainId === \"number\" ? chainId : parseInt(chainId, 16) : getDefaultNetworkId(chainNamespace);\n\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return getEvmChainConfig(finalChainId);\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return getSolanaChainConfig(finalChainId);\n  }\n\n  return null;\n};\n\nclass Web3AuthError extends ts_custom_error__WEBPACK_IMPORTED_MODULE_2__.CustomError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(message);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"code\", void 0);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"message\", void 0);\n\n    this.code = code;\n    this.message = message || \"\"; // Set name explicitly as minification can mangle class names\n\n    Object.defineProperty(this, \"name\", {\n      value: \"Web3AuthError\"\n    });\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message\n    };\n  }\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n\n}\nclass WalletInitializationError extends Web3AuthError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message); // Set name explicitly as minification can mangle class names\n\n    Object.defineProperty(this, \"name\", {\n      value: \"WalletInitializationError\"\n    });\n  }\n\n  static fromCode(code) {\n    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    return new WalletInitializationError(code, \"\".concat(WalletInitializationError.messages[code], \", \").concat(extraMessage));\n  } // Custom methods\n\n\n  static notFound() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  static notInstalled() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  static notReady() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  static windowBlocked() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  static windowClosed() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  static incompatibleChainNameSpace() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  static duplicateAdapterError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  static invalidProviderConfigError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  static providerNotReadyError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  static rpcConnectionError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  static invalidParams() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  static invalidNetwork() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n\n}\n/**\n * wallet login errors\n */\n\n(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(WalletInitializationError, \"messages\", {\n  5000: \"Custom\",\n  5001: \"Wallet is not found\",\n  5002: \"Wallet is not installed\",\n  5003: \"Wallet is not ready yet\",\n  5004: \"Wallet window is blocked\",\n  5005: \"Wallet window has been closed by the user\",\n  5006: \"Incompatible chain namespace provided\",\n  5007: \"Adapter has already been included\",\n  5008: \"Invalid provider Config\",\n  5009: \"Provider is not ready yet\",\n  5010: \"Failed to connect with rpc url\",\n  5011: \"Invalid params passed in\",\n  5013: \"Invalid network provided\"\n});\n\nclass WalletLoginError extends Web3AuthError {\n  constructor(code, message) {\n    // takes care of stack and proto\n    super(code, message); // Set name explicitly as minification can mangle class names\n\n    Object.defineProperty(this, \"name\", {\n      value: \"WalletLoginError\"\n    });\n  }\n\n  static fromCode(code) {\n    let extraMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    return new WalletLoginError(code, \"\".concat(WalletLoginError.messages[code]).concat(extraMessage));\n  }\n\n  static connectionError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  static disconnectionError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  static notConnectedError() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  static popupClosed() {\n    let extraMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n\n}\n\n(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(WalletLoginError, \"messages\", {\n  5000: \"Custom\",\n  5111: \"Failed to connect with wallet\",\n  5112: \"Failed to disconnect from wallet\",\n  5113: \"Wallet is not connected\",\n  5114: \"Wallet popup has been closed by the user\"\n});\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nconst MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\"\n};\nconst SOLANA_ADAPTERS = _objectSpread$1({\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLLET: \"sollet\",\n  SOLLET_EXTENSION: \"sollet-extension\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\"\n}, MULTI_CHAIN_ADAPTERS);\nconst EVM_ADAPTERS = _objectSpread$1({\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\"\n}, MULTI_CHAIN_ADAPTERS);\nconst WALLET_ADAPTERS = _objectSpread$1(_objectSpread$1({}, EVM_ADAPTERS), SOLANA_ADAPTERS);\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\"\n};\nconst ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\"\n};\nconst ADAPTER_EVENTS = _objectSpread(_objectSpread({}, ADAPTER_STATUS), {}, {\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\"\n});\nclass BaseAdapter extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.SafeEventEmitter {\n  constructor() {\n    super(...arguments);\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"adapterData\", {});\n\n    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, \"chainConfig\", null);\n  }\n\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n\n  setChainConfig(customChainConfig) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n    const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n    this.chainConfig = _objectSpread(_objectSpread({}, defaultChainConfig), customChainConfig);\n  }\n\n  setAdapterSettings(_) {}\n\n  checkConnectionRequirements() {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY) throw WalletLoginError.connectionError(\"Wallet adapter is not ready yet\");\n  }\n\n  checkInitializationRequirements() {\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  updateAdapterData(data) {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, {\n      adapterName: this.name,\n      data\n    });\n  }\n\n}\nclass BaseNetworkSwitch {}\n\nvar loglevel = loglevel__WEBPACK_IMPORTED_MODULE_3___default().getLogger(\"web3auth-logger\");\n\nconst PROVIDER_EVENTS = {\n  INITIALIZED: \"initialized\",\n  ERRORED: \"errored\"\n};\n\nfunction storageAvailable(type) {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage;\n\n  try {\n    storage = window[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error) {\n    const _error = error;\n    return !!(_error && ( // everything except Firefox\n    _error.code === 22 || // Firefox\n    _error.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    _error.name === \"QuotaExceededError\" || // Firefox\n    _error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storageExists && storageLength !== 0);\n  }\n}\nconst isHexStrict = hex => {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n\n\n//# sourceMappingURL=base.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/dist/base.esm.js\n");

/***/ })

}]);